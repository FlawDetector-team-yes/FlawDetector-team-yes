import TableBodyTr from "./TableBodyTr";
import TableHead from "./TableHead";
import GuideText from "./GuideText";
import { DetailContentProps } from "@/types/vulnerability";

/**
 * @description 표 형식으로 데이터를 표시하는 컴포넌트.
 *
 * @returns {JSX.Element} 테이블을 포함한 레이아웃을 반환
 *
 * @remarks
 * - `TableHead` 컴포넌트를 사용하여 테이블의 헤더를 렌더링합니다.
 * - `TableBodyTr` 컴포넌트를 사용하여 테이블의 본문 데이터를 렌더링합니다.
 */

// table 값이 있으면 TableHead에 0~5번까지? X 1
function Table({ detailData, dataId }: DetailContentProps) {
  const tableData = detailData?.arrayTable;
  if (tableData.length === 0) {
    return <div></div>;
  }

  // 1이 나오기 전까지의 인덱스 값들을 추출
  const headersBeforeOne = detailData?.arrayTable
    ? detailData.arrayTable.slice(0, detailData.arrayTable.indexOf("1"))
    : [];

  const tableColumnCount = headersBeforeOne.length;

  return (
    <>
      <GuideText />
      <div className="rounded-md border border-neutral-20 p-[20px] text-neutral-80 min-[300px]:hidden lg:block">
        <table className="w-full table-fixed border-separate border-spacing-[10px]">
          <thead>
            <tr className="text-center">
              {/* 1이 나오기 전까지의 값들을 TableHead로 렌더링 */}
              {headersBeforeOne.map((header, index) => (
                <TableHead key={index}>{header}</TableHead>
              ))}
            </tr>
          </thead>
          <tbody>
            <TableBodyTr
              tableData={tableData}
              tableColumnCount={tableColumnCount}
            />
          </tbody>
        </table>
      </div>
    </>
  );
}

export default Table;
