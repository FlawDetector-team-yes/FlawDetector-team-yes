"use client";

import Image from "next/image";
import React, { useEffect, useState } from "react";
import paginationRightArrow from "/public/images/right-arrow-pagination.png";
import paginationLeftArrow from "/public/images/left-arrow-pagination.png"; // 왼쪽 화살표 이미지 추가
import { useRouter, useSearchParams } from "next/navigation"; // Next.js 14에서 useRouter와 useSearchParams 사용

/**
 * @description `Pagination` 컴포넌트는 페이지네이션 UI를 생성합니다.
 * 사용자는 페이지 번호를 클릭하여 원하는 페이지로 이동할 수 있으며, 페이지 이동 시 URL에 `page` 값을 넣습니다.
 *
 * @typedef {Object} TPaginationProps
 * @property {number} totalPage - 전체 페이지 수.
 *
 * @param {TPaginationProps} props - 페이지네이션 관련 속성을 전달받습니다.
 * @returns {JSX.Element} 페이지네이션 컴포넌트를 반환합니다.
 */

type TPaginationProps = {
  totalPage: number;
};

function ClipPagination({ totalPage }: TPaginationProps): JSX.Element {
  const router = useRouter(); // next/navigation의 useRouter 사용
  const searchParams = useSearchParams(); // 현재 URL의 쿼리 파라미터를 가져오기 위한 훅
  const pageQuery = parseInt(searchParams.get("page") || "1", 10); // 현재 페이지 쿼리 파라미터 값 (기본값 1)
  const sortQuery = searchParams.get("sort") || "recent"; // sort 쿼리 파라미터 값 (기본값 recent)
  const [page, setPage] = useState(pageQuery); // 페이지 상태

  // 페이지 번호가 변할 때 페이지 상태 업데이트
  useEffect(() => {
    setPage(pageQuery); // URL의 쿼리 파라미터에 따라 페이지 상태를 업데이트
  }, [pageQuery]);

  // 페이지 번호를 클릭했을 때 URL을 변경하는 함수
  const handlePageChange = (pageNumber: number) => {
    if (pageNumber !== page) {
      setPage(pageNumber); // 페이지 상태 변경

      // URL 쿼리 파라미터를 문자열로 생성
      const params = new URLSearchParams({
        page: pageNumber.toString(),
        sort: sortQuery,
      });

      // router.push에 문자열로 경로 전달
      router.push(`?${params.toString()}`);
    }
  };

  // 10개씩 페이지 번호를 표시하는 부분
  const startPage = Math.floor((page - 1) / 10) * 10 + 1;
  const endPage = Math.min(startPage + 9, totalPage); // 마지막 페이지는 전체 페이지를 넘지 않도록 설정

  // 페이지 그룹을 오른쪽으로 이동시키는 함수
  const goToNextPageGroup = () => {
    const nextPage = Math.min(endPage + 1, totalPage);
    handlePageChange(nextPage);
  };

  // 페이지 그룹을 왼쪽으로 이동시키는 함수
  const goToPreviousPageGroup = () => {
    const previousPage = Math.max(startPage - 1, 1);
    handlePageChange(previousPage);
  };

  return (
    <div className="mb-10 flex justify-center gap-2">
      {/* 왼쪽 화살표 버튼: startPage가 1보다 클 때만 표시 */}
      {startPage > 1 && (
        <button
          onClick={goToPreviousPageGroup}
          className="flex h-9 w-9 items-center justify-center hover:rounded-[4px] hover:bg-gray-300"
        >
          <Image src={paginationLeftArrow} alt="left" width={24} height={24} />
        </button>
      )}

      {/* 페이지 번호 버튼들 */}
      {Array.from({ length: endPage - startPage + 1 }, (_, index) => {
        const pageNumber = startPage + index;
        return (
          <button
            onClick={() => handlePageChange(pageNumber)}
            key={pageNumber}
            className={`h-9 w-9 text-center text-base ${
              page === pageNumber
                ? "cursor-not-allowed bg-gray-300 text-neutral-80"
                : "text-neutral-80"
            } hover:rounded-[4px] hover:bg-gray-300`}
            disabled={page === pageNumber} // 이미 선택된 페이지는 disabled 처리
          >
            {pageNumber}
          </button>
        );
      })}

      {/* 오른쪽 화살표 버튼: endPage가 totalPage보다 작을 때만 표시 */}
      {endPage < totalPage && (
        <button
          onClick={goToNextPageGroup}
          className="flex h-9 w-9 items-center justify-center hover:rounded-[4px] hover:bg-gray-300"
        >
          <Image
            src={paginationRightArrow}
            alt="right"
            width={24}
            height={24}
          />
        </button>
      )}
    </div>
  );
}

export default ClipPagination;
